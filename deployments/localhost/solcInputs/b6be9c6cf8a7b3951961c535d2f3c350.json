{
  "language": "Solidity",
  "sources": {
    "contracts/auction.sol": {
      "content": "//SPDX-License-Identifier:MIT\n\npragma solidity ^0.8.8;\n\ncontract auction {\n    mapping(address => uint) bidderData;\n    uint highestBid;\n    address highestBidderAddress;\n    uint startTime = block.timestamp;\n    uint endTime;\n    uint minimum_bid;\n\n    constructor(uint256 _minimum_bid, uint _duration) {\n        minimum_bid = _minimum_bid;\n        endTime = startTime + _duration;\n    }\n\n    //putbid function\n    function bid() public payable {\n        uint totalBid = bidderData[msg.sender] + msg.value;\n        //check if greater than zero\n        require(msg.value >= minimum_bid, \"Bid should be greater or equal to minimum bid\");\n        //check if the auction has ended\n        require(block.timestamp < endTime, \"The auction has ended\");\n\n        //check if total bid is higher than highest bid\n        require(totalBid > highestBid, \"The bid should be higher than the highest bid\");\n        bidderData[msg.sender] = totalBid;\n        highestBid = bidderData[msg.sender];\n        highestBidderAddress = msg.sender;\n    }\n\n    //get biders bid\n    function getBiddersBid(address _address) public view returns (uint) {\n        return bidderData[_address];\n    }\n\n    function getHighestBid() public view returns (uint) {\n        return highestBid;\n    }\n\n    function getHighestBidder() public view returns (address) {\n        return highestBidderAddress;\n    }\n\n    function putEndTime(uint _endTime) public {\n        endTime = _endTime;\n    }\n\n    function withdrawBid(address payable _address) public {\n        if (bidderData[_address] > 0) {\n            require(\n                bidderData[_address] != highestBid,\n                \"Highest bidder cannot withdraw from auction\"\n            );\n            _address.transfer(bidderData[_address]);\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}